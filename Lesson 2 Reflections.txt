What happens when you initialize a repository? Why do you need to do it?

	Git creates its infrastructure layout for keeping track of file versions.  It does not create any "commits."
	You need to do it in order to have any kind of version tracking enabled, obviously.

How is the staging area different from the working directory and the repository?  What value do you think it offers?

	The staging area makes it possible to select specific items to be defined as 'currently being worked on' without necessarily committing them.  This way if some items do not require changes at this time, they need not be tracked.  This probably conserves disk space for future commits by not creating needless copies of identical files.


How can you use the staging area to make sure you have one commit per logical change? 
	The use of diff can be helpful, or by only adding one file at a time to make logical changes to them.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

	Special versions.  Alternate language versions.  Versions for which a selector might be added later to the master to swap between them.  Alternate OS versions.  
	The branches help by keeping code changes in the various kinds separate.  One wouldn't necessarily want a smartphone outlay on the PC version now would we? 

How do the diagrams help you visualize the branch structure? 
	The diagrams present a one-glance view of all branches and commits thereon, with the relationship between those branches.  

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?

	The head of the branches is merged together in the most logical manner possible.  Both are compared to the last version prior to branching off in different directions.  Lines added since then are considered added.  Lines deleted since then are considered deleted.  However, if the same line is added in different ways it results in a "merge conflict."
	We represent it the way we do in order to reflect the version history of the two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
	The pro of git's automatic merging is it merges elements that obviously do not conflict.  The con is that merge conflicts can be iffy to identify and comprehend.  It coughs up a file with all versions of the "conflict" which can be annoying to parse.
	Manual merging avoids the problem of difficult-to-parse merge commits, but is more time consuming if the automatic merge would have worked fine.